Builder Pattern- Hands on exercise.

Consider a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke or pepsi and will be packed in a bottle.

We have an Item interface representing food items such as burgers and cold drinks and concrete classes implementing the Item interface and a Packing interface representing packaging of food items and concrete classes implementing the Packing interface as burger would be packed in wrapper and cold drink would be packed as bottle.

We then create a Meal class having ArrayList of Item and a MealBuilder to build different types of Meal objects by combining Item. BuilderPatternDemo, our demo class will use MealBuilder to build a Meal.

Already implemented in the sample code is Veg burger and coke as the associated drink.
Exercise is to use the sample code to build the Chicken Burger and Pepsi as the associated Drink. Create/ update relevant classes to create this line of product.


Exercise Steps

1. Go through the Items, packing, Wrapper, Bottle classes and understand their properties and functions and inheritance.

2. Go through Burger and Colddrink classes, identify concepts of inheritance, Encapsulation. Ponder on why they have been created as ‘abstract class’ rather than an interface.

3. Implement Chicken burger and Pepsi class inheriting from appropriate classes. Implement the functions within these classes.

4. Update Mealbuilder class with a method to build NonVegMeal using Chicken Burger and Pepsi objects.

5. Update ‘Builder Pattern Demo’ to show the call the NonVegMeal method of mealBuilder class and print the name and cost of the items.

6. Validate the output for correctness.

7. Think about the usage of the pattern in the real world and provide 2 scenarios where this could be applied.
